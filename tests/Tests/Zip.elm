module Tests.Zip exposing (suite, withSample)

import Expect exposing (Expectation)
import Hex.Convert
import Test exposing (..)
import Zip exposing (Zip)
import Zip.Entry


withSample : (Zip -> Expectation) -> () -> Expectation
withSample fn () =
    let
        maybeZip =
            "504B0304 0A000000 0000943C 29520000 00000000 00000000 00000D00 0900656C 6D2D7A69 702D6D61 696E2F55 54050001 88CDF95F 504B0304 0A000000 0800943C 29522892 70133B00 00004F00 00001700 0900656C 6D2D7A69 702D6D61 696E2F2E 67697469 676E6F72 65555405 000188CD F95F5356 48CDC9D5 2D484CCE 4E4C4F55 484FCD4B 2D4A2C49 4D5148CB CC492DE6 02C91597 94A6A571 2983D515 A516E460 280209EA 96A4E616 E86A7101 00504B03 040A0000 00080094 3C29526A 60A32120 030000F0 05000014 00090065 6C6D2D7A 69702D6D 61696E2F 4C494345 4E534555 54050001 88CDF95F 9552C16E E33610BD F32B067B DA00AADB CDDEDA13 2DD13601 5954492A 5EF7264B 74424012 03914A90 BFEF9076 1A6FB768 D18B3DE2 CCBC79EF CDAC5501 5F7FCA87 76F1064A DB99C91B 4272F7FC 36DBC7A7 009FBB3B B8FFE5FE 4B06F471 F1F0C772 B2ED634B E830402A F0301B6F E617D3AF 0891A6B7 3ECCF6B4 04EB2668 A71E22AC 9DC0BB65 EE4C7A39 D9A99DDF E0ECE6D1 67F06AC3 13B839FD BB2590D1 F5F66CBB 360264D0 CE069ECD 3CDA104C 0FCFB37B B13D06E1 A90DF863 106418DC AB9D1EA1 73536F63 934F4DA3 09BF12F2 6505DF53 F2E0CEEF 5C3AD763 DDE2032A 082D728C 80EDC9BD C4D4BBFC C905F424 C39CF504 0006048B 18B7E3A6 FE6F5C70 6237B476 34337A72 FF23079C 7563C23B 0754D72F C8EB5F68 440691C9 FFA50157 75BDEB96 D14C21B9 1BC1B0E9 6734DF61 7286B10D 66B6EDE0 3F8C4EDB 499D3702 50D4D715 54C6A6AE 989DDAD1 443A31FE 20FDE486 1E0B26F7 5194FCB7 215989DC 2F906EF6 38FB0D4E 265E0BAA 7060A61E 5F4D3C0C E432BA60 E0620FDE 1B625A3C 373863E2 2F43BC3B 87D7B8F8 EB1D817F 365D3C24 ECB3F1BC E67842D3 E598BCBF A8D03BAE 40898D3E 50C900E3 5A8A075E B002D647 D03B06B9 A88F926F 771A76A2 2C985440 AB025F2B 2DF9BAD1 021F3E51 859D9F48 4CD0EA08 EC5B2D99 522024F0 7D5D7204 4374492B CD99CA80 5779D914 BCDA6680 0050090D 25DF738D 655A6471 28F9B10D C406F64C E63BFCA4 6B5E727D 4C44365C 5771D606 8751A8A9 D43C6F4A 2AA16E64 2D140394 450AAEF2 92F23D2B 56381D27 027B6095 06B5A365 F98F2A23 F7EF34AE 1992A4EB 92913409 55165CB2 5C47391F 518ECE21 BF320355 B39CC780 7D632886 CA6376C5 54ECF706 8B30490A BAA75BD4 F6F93F2C C19DE48D 64FBC819 7D50CD5A 69AE1BCD 602B4411 8D268AC9 079E33F5 1B944225 B71AC532 28A8A669 3042A055 98C678DD 289E4CE3 95665236 B5E6A2BA 43E507B4 45929C62 6B91DC15 55928A0E 09798CA0 D183647E 06871DC3 77190D4D 4ED16881 42C7727D 5346701E 1AA86F34 42C5B625 DFB22A67 918D8828 07AED81D EE8AAB58 C02F630F 14673649 72DC11B2 2229BCB9 D82C6D12 F80668F1 C023ED6B 31EE5EF1 EB9D24CB F21D5CEC 5E913F01 504B0304 0A000000 0000943C 2952CE6A 003F2E00 00002E00 00001600 0900656C 6D2D7A69 702D6D61 696E2F52 4541444D 452E6D64 55540500 0188CDF9 5F232065 6C6D2D7A 69700A45 78747261 6374207A 69702066 696C6573 20646972 6563746C 79206672 6F6D2045 6C6D0A50 4B010200 000A0000 00000094 3C295200 00000000 00000000 0000000D 00090000 00000000 00100000 00000000 00656C6D 2D7A6970 2D6D6169 6E2F5554 05000188 CDF95F50 4B010200 000A0000 00080094 3C295228 9270133B 0000004F 00000017 00090000 00000001 00000000 00340000 00656C6D 2D7A6970 2D6D6169 6E2F2E67 69746967 6E6F7265 55540500 0188CDF9 5F504B01 0200000A 00000008 00943C29 526A60A3 21200300 00F00500 00140009 00000000 00010000 000000AD 00000065 6C6D2D7A 69702D6D 61696E2F 4C494345 4E534555 54050001 88CDF95F 504B0102 00000A00 00000000 943C2952 CE6A003F 2E000000 2E000000 16000900 00000000 01000000 00000804 0000656C 6D2D7A69 702D6D61 696E2F52 4541444D 452E6D64 55540500 0188CDF9 5F504B05 06000000 00040004 002A0100 00730400 00280039 30393930 61303934 61373162 61393236 34303164 30633638 37636137 31623533 61623536 313634"
                |> String.replace " " ""
                |> Hex.Convert.toBytes
                |> Maybe.andThen Zip.fromBytes
    in
    case maybeZip of
        Just zip ->
            fn zip

        Nothing ->
            Expect.fail "failed to decode"


suite : Test
suite =
    describe "Zip"
        [ describe "fromBytes"
            [ test "creates a Zip when valid" (withSample <| \_ -> Expect.pass)
            ]
        , describe "all"
            [ test "returns all entries in the file" <|
                withSample (Zip.all >> List.length >> Expect.equal 4)
            ]
        , describe "byName"
            [ test "returns just the entry if it exists" <|
                withSample
                    (Zip.byName "elm-zip-main/README.md"
                        >> Maybe.map Zip.Entry.fileName
                        >> Expect.equal (Just "elm-zip-main/README.md")
                    )
            , test "returns nothing if it does not exist" <|
                withSample
                    (Zip.byName "elm-zip-main/nonexistent"
                        >> Maybe.map Zip.Entry.fileName
                        >> Expect.equal Nothing
                    )
            ]
        ]
